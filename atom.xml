<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OreChou&#39;s Workspace</title>
  
  <subtitle>Coding &amp; Reading &amp; Playing &amp; Listening</subtitle>
  <link href="https://orechou.github.io/atom.xml" rel="self"/>
  
  <link href="https://orechou.github.io/"/>
  <updated>2022-03-27T11:15:57.214Z</updated>
  <id>https://orechou.github.io/</id>
  
  <author>
    <name>OreChou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【iOS】在地图中绘制坐标轨迹</title>
    <link href="https://orechou.github.io/2022/03/27/iOS/iOS_%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%AD%E7%BB%98%E5%88%B6%E5%9D%90%E6%A0%87%E8%BD%A8%E8%BF%B9/"/>
    <id>https://orechou.github.io/2022/03/27/iOS/iOS_%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%AD%E7%BB%98%E5%88%B6%E5%9D%90%E6%A0%87%E8%BD%A8%E8%BF%B9/</id>
    <published>2022-03-27T09:43:00.000Z</published>
    <updated>2022-03-27T11:15:57.214Z</updated>
    
    <content type="html"><![CDATA[<p>一直有想做属于自己的 App 的想法，零零散散地有学习一些内容，现在决定开启一个记录学习过程的系列博文，以此来巩固自己所学到的 iOS 开发知识和激励自己把第一个 App 实现出来。<br>脑海中一直有个做地图类应用的想法，本科做移动轨迹相关的毕业设计。此类应用主要包括地图（Map）、坐标点（Location）、绘制轨迹（Polyline）几个要素。这篇博文将会使用 SwiftUI 在地图上连接坐标点绘制出轨迹。GPS 坐标数据可以在 <a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=52367">microsoft</a> 上下载。效果如下：<br><img src="https://raw.githubusercontent.com/OreChou/PicBed/main/img/polyline_demo.png"><br>首先创建一个 SwiftUI 工程的项目，项目的文件组织如下：<br><img src="https://raw.githubusercontent.com/OreChou/PicBed/main/img/SwiftUIPolyline_Project.png"><br>先定义坐标点的数据结构，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span>: <span class="title">Hashable</span>, <span class="title">Codable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="comment">// 经度</span></span><br><span class="line">    <span class="keyword">var</span> longitude: <span class="type">Double</span></span><br><span class="line">    <span class="comment">// 纬度</span></span><br><span class="line">    <span class="keyword">var</span> latitude: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> isValid: <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>坐标数据的 ViewModel，我们将从 location.json 中加载所有的坐标点，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationViewModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> locations: [<span class="type">Location</span>] <span class="operator">=</span> load(<span class="string">&quot;location.json&quot;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">load</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">fileName</span>: <span class="type">String</span>)</span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="comment">// The data value type allows simple byte buffers to take on behavior of Foundation objects.</span></span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">Data</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> file <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: fileName, withExtension: <span class="literal">nil</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Couldn&#x27;t find <span class="subst">\(fileName)</span> in main bundle.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: file)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Couldn&#x27;t load <span class="subst">\(fileName)</span> from main bundle:<span class="subst">\n</span><span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> decoder.decode(<span class="type">T</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Couldn&#x27;t parse <span class="subst">\(fileName)</span> as <span class="subst">\(T.<span class="keyword">self</span>)</span>:<span class="subst">\n</span><span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们将利用 <code>UIViewRepresentable</code> 这个协议实现将 UIKit 的 UIView 集成到 SwiftUI 中使用。<code>UIViewRepresentable</code> 只包含四个方法。其中 <code>makeUIView</code> , <code>updateUIView</code> 用于创建和更新视图。<code>makeCoordinator</code> 创建协调器，用于通知其它 UI 与该 View 之间的变化更新。<code>dismantleUIView</code> 用于在移除 View 时做一些善后操作。四个方法在 <code>UIViewRepresentable</code> 生命周期中的调用顺序如下：<br><img src="https://raw.githubusercontent.com/OreChou/PicBed/main/img/UIViewRepresentable_lifecycle.png"><br>我们的 MapView 代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MapView</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> locationViewModel <span class="operator">=</span> <span class="type">LocationViewModel</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> mapZoomEdgeInsets <span class="operator">=</span> <span class="type">UIEdgeInsets</span>(top: <span class="number">30.0</span>, left: <span class="number">30.0</span>, bottom: <span class="number">30.0</span>, right: <span class="number">30.0</span>)</span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span>()</span> -&gt; <span class="type">MapViewCoordinator</span> &#123;</span><br><span class="line">        <span class="type">MapViewCoordinator</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>)</span> -&gt; <span class="type">MKMapView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mapView <span class="operator">=</span> <span class="type">MKMapView</span>()</span><br><span class="line">        mapView.showsUserLocation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        mapView.delegate <span class="operator">=</span> context.coordinator</span><br><span class="line">        <span class="keyword">return</span> mapView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">MKMapView</span>, <span class="params">context</span>: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">MapView</span>&gt;)</span> &#123;</span><br><span class="line">        updateOverlays(from: uiView)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">updateOverlays</span>(<span class="params">from</span> <span class="params">mapView</span>: <span class="type">MKMapView</span>)</span> &#123;</span><br><span class="line">        mapView.removeOverlays(mapView.overlays)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> coordinates <span class="operator">=</span> [<span class="type">CLLocationCoordinate2D</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>locationViewModel.locations.count &#123;</span><br><span class="line">            <span class="keyword">let</span> location <span class="operator">=</span> locationViewModel.locations[i]</span><br><span class="line">            coordinates.append(<span class="type">CLLocationCoordinate2D</span>(latitude: location.latitude, longitude: location.longitude))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> polyline <span class="operator">=</span> <span class="type">MKPolyline</span>(coordinates: coordinates, count: locationViewModel.locations.count)</span><br><span class="line">        mapView.addOverlay(polyline)</span><br><span class="line">        setMapZoomArea(map: mapView, polyline: polyline, edgeInsets: mapZoomEdgeInsets, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setMapZoomArea</span>(<span class="params">map</span>: <span class="type">MKMapView</span>, <span class="params">polyline</span>: <span class="type">MKPolyline</span>, <span class="params">edgeInsets</span>: <span class="type">UIEdgeInsets</span>, <span class="params">animated</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>)</span> &#123;</span><br><span class="line">        map.setVisibleMapRect(polyline.boundingMapRect, edgePadding: edgeInsets, animated: animated)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MapView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">MapView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协调器 MayViewCoordinator 代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapViewCoordinator</span>: <span class="title">NSObject</span>, <span class="title">MKMapViewDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> mapView: <span class="type">MapView</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">control</span>: <span class="type">MapView</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.mapView <span class="operator">=</span> control</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span>(<span class="keyword">_</span> <span class="params">mapView</span>: <span class="type">MKMapView</span>, <span class="params">didAdd</span> <span class="params">views</span>: [<span class="type">MKAnnotationView</span>])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> annotationView <span class="operator">=</span> views.first, <span class="keyword">let</span> annotation <span class="operator">=</span> annotationView.annotation &#123;</span><br><span class="line">            <span class="keyword">if</span> annotation <span class="keyword">is</span> <span class="type">MKUserLocation</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> region <span class="operator">=</span> <span class="type">MKCoordinateRegion</span>(center: annotation.coordinate, latitudinalMeters: <span class="number">1000</span>, longitudinalMeters: <span class="number">1000</span>)</span><br><span class="line">                mapView.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span>(<span class="keyword">_</span> <span class="params">mapView</span>: <span class="type">MKMapView</span>, <span class="params">rendererFor</span> <span class="params">overlay</span>: <span class="type">MKOverlay</span>)</span> -&gt; <span class="type">MKOverlayRenderer</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">MKPolylineRenderer</span>(overlay: overlay)</span><br><span class="line">        <span class="comment">// set the line properties such as color and width</span></span><br><span class="line">        renderer.strokeColor <span class="operator">=</span> .blue</span><br><span class="line">        renderer.lineWidth <span class="operator">=</span> <span class="number">3.0</span></span><br><span class="line">        <span class="keyword">return</span> renderer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接<br><a href="https://www.fatbobman.com/posts/uikitInSwiftUI/">https://www.fatbobman.com/posts/uikitInSwiftUI/</a><br><a href="https://medium.com/@mauvazquez/decoding-a-polyline-and-drawing-it-with-swiftui-mapkit-611952bd0ecb">https://medium.com/@mauvazquez/decoding-a-polyline-and-drawing-it-with-swiftui-mapkit-611952bd0ecb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直有想做属于自己的 App 的想法，零零散散地有学习一些内容，现在决定开启一个记录学习过程的系列博文，以此来巩固自己所学到的 iOS 开发知识和激励自己把第一个 App 实现出来。&lt;br&gt;脑海中一直有个做地图类应用的想法，本科做移动轨迹相关的毕业设计。此类应用主要包括地图</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://orechou.github.io/tags/iOS/"/>
    
    <category term="SwiftUI" scheme="https://orechou.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>【生活】记事一则</title>
    <link href="https://orechou.github.io/2022/02/13/life/%E8%AE%B0%E4%BA%8B%E4%B8%80%E5%88%99/"/>
    <id>https://orechou.github.io/2022/02/13/life/%E8%AE%B0%E4%BA%8B%E4%B8%80%E5%88%99/</id>
    <published>2022-02-13T07:40:00.000Z</published>
    <updated>2022-03-27T11:13:56.576Z</updated>
    
    <content type="html"><![CDATA[<p>下午，yoyo 和两支小🐱虎在😴。我坐在客厅写一些文字，记录一下心情。</p><p>首先要说的是，年前我和 yoyo 在老家举办完了婚礼，虽然我们还没有领证，但终于我们也算是完成了去年最大、最重要的一个 OKR。现在 yoyo 也🤰🏻了，虽然这也是之前一直计划的事情，但当 ta 真的来了的事情，我内心除了惊喜 max，还是有些慌张的。这种慌张不能让 yoyo 看出来。年后没几天我跟 yoyo 就工作城市深圳了，这座城市是很忙碌、劳累的。所以这段时间，我也一直在考虑怎么让我们更加轻松一些。所以现在关注了本身工作之外的一些内容，例如 区块链、NFTs、美股等等，想要找到一些虽不能说完成跨越，但至少能让自己工作不那么累的事情。我也一直在考虑未来自由职业的道路，但无奈自己现在很缺乏自信和对自己的认同。</p><p>今年定了几个 OKR，努力去实现吧。另外我得放松体验生活。不管再多事情，生活是我们自己的。先不说这么多了，我得叫 yoyo 起来出去散步了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下午，yoyo 和两支小🐱虎在😴。我坐在客厅写一些文字，记录一下心情。&lt;/p&gt;
&lt;p&gt;首先要说的是，年前我和 yoyo 在老家举办完了婚礼，虽然我们还没有领证，但终于我们也算是完成了去年最大、最重要的一个 OKR。现在 yoyo 也🤰🏻了，虽然这也是之前一直计划的事</summary>
      
    
    
    
    
    <category term="Life" scheme="https://orechou.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】实现列表数据置顶</title>
    <link href="https://orechou.github.io/2021/08/16/mysql/MySQL_%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BD%AE%E9%A1%B6/"/>
    <id>https://orechou.github.io/2021/08/16/mysql/MySQL_%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BD%AE%E9%A1%B6/</id>
    <published>2021-08-16T06:46:00.000Z</published>
    <updated>2022-03-27T11:14:09.194Z</updated>
    
    <content type="html"><![CDATA[<p>有的列表获取的业务场景，需要根据一些条件将数据置顶。</p><p>例如有一张表有 id 和 name 两个字段。数据表如下。</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>1_name</td></tr><tr><td>2</td><td>2_name</td></tr><tr><td>3</td><td>3_name</td></tr><tr><td>4</td><td>4_name</td></tr><tr><td>5</td><td>5_name</td></tr><tr><td>6</td><td>6_name</td></tr><tr><td>7</td><td>7_name</td></tr><tr><td>8</td><td>8_name</td></tr><tr><td>9</td><td>9_name</td></tr><tr><td>10</td><td>10_name</td></tr></tbody></table><p>若需要将 id 为 5 和 7 的数据置顶，并且分页的 size 是 5 的话，我们的 SQL 可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM goods ORDER BY </span><br><span class="line">CASE </span><br><span class="line">WHEN id = 5 THEN -10000</span><br><span class="line">WHEN id = 7 THEN -9999 </span><br><span class="line">ELSE id </span><br><span class="line">END</span><br><span class="line">LIMIT 0, 5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有的列表获取的业务场景，需要根据一些条件将数据置顶。&lt;/p&gt;
&lt;p&gt;例如有一张表有 id 和 name 两个字段。数据表如下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://orechou.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】慢 SQL 分析</title>
    <link href="https://orechou.github.io/2021/08/10/mysql/MySQL_%E6%85%A2%20SQL%20%E5%88%86%E6%9E%90/"/>
    <id>https://orechou.github.io/2021/08/10/mysql/MySQL_%E6%85%A2%20SQL%20%E5%88%86%E6%9E%90/</id>
    <published>2021-08-10T04:30:00.000Z</published>
    <updated>2022-03-27T11:14:03.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="慢查询日志分析"><a href="#慢查询日志分析" class="headerlink" title="慢查询日志分析"></a>慢查询日志分析</h2><h3 id="设置慢查询"><a href="#设置慢查询" class="headerlink" title="设置慢查询"></a>设置慢查询</h3><p>可以通过修改命令设置：</p><ul><li>设置开启：SET GLOBAL slow_query_log = 1; #默认未开启，开启会影响性能，mysql重启会失效</li><li>查看是否开启：SHOW VARIABLES LIKE ‘%slow_query_log%’;</li><li>设置阈值：SET GLOBAL long_query_time=3;</li><li>查看阈值：SHOW 【GLOBAL】 VARIABLES LIKE ‘long_query_time%’; #重连或新开一个会话才能看到修改值</li></ul><p>也可以通过修改配置文件设置，配置文件 my.conf 会一直生效，在[mysqld]下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log = 1;　　#开启</span><br><span class="line">slow_query_log_file=/var/lib/mysql/atguigu-slow.log　　　#慢日志地址，缺省文件名host_name-slow.log</span><br><span class="line">long_query_time=3;　　  #运行时间超过该值的SQL会被记录，默认值&gt;10</span><br><span class="line">log_output=FILE　　　　　　　　　　　</span><br></pre></td></tr></table></figure><h3 id="获取慢-SQL-信息"><a href="#获取慢-SQL-信息" class="headerlink" title="获取慢 SQL 信息"></a>获取慢 SQL 信息</h3><p>查看慢查询日志记录数：SHOW GLOBAL STATUS LIKE ‘%Slow_queries%’;</p><p>模拟语句：SELECT SLEEP(4);</p><p>查看慢查询日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/local/var/mysql/OreChoudeMacBook-Pro-slow.log</span><br><span class="line">/usr/local/Cellar/mysql/8.0.25_1/bin/mysqld, Version: 8.0.25 (Homebrew). started with:</span><br><span class="line">Tcp port: 3306  Unix socket: /tmp/mysql.sock</span><br><span class="line">Time                 Id Command    Argument</span><br><span class="line"># Time: 2021-08-10T06:29:53.513752Z</span><br><span class="line"># User@Host: root[root] @ localhost [127.0.0.1]  Id:    11</span><br><span class="line"># Query_time: 4.003605  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 1</span><br><span class="line">use test;</span><br><span class="line">SET timestamp=1628576989;</span><br><span class="line">select sleep(4);</span><br></pre></td></tr></table></figure><h3 id="使用-mysqldumpslow-分析"><a href="#使用-mysqldumpslow-分析" class="headerlink" title="使用 mysqldumpslow 分析"></a>使用 mysqldumpslow 分析</h3><p>使用样例：</p><ul><li>mysqldumpslow -s r -t 10 /usr/local/var/mysql/OreChoudeMacBook-Pro-slow.log     #得到返回记录集最多的10个SQL</li><li>mysqldumpslow -s c -t 10 /usr/local/var/mysql/OreChoudeMacBook-Pro-slow.log     #得到访问次数最多的10个SQL</li><li>mysqldumpslow -s t -t 10 -g “LEFT JOIN” /usr/local/var/mysql/OreChoudeMacBook-Pro-slow.log   #得到按照时间排序的前10条里面含有左连接的查询语句</li><li>mysqldumpslow -s r -t 10 /usr/local/var/mysql/OreChoudeMacBook-Pro-slow.log | more      #结合| more使用，防止爆屏情况</li></ul><h2 id="Explain-分析"><a href="#Explain-分析" class="headerlink" title="Explain 分析"></a>Explain 分析</h2><h2 id="Show-Profile-分析"><a href="#Show-Profile-分析" class="headerlink" title="Show Profile 分析"></a>Show Profile 分析</h2><p>Show Profile 能够获取比 Explain 更为详细的信息，能够分析当前会话中语句执行时的资源消耗，获取 SQL 在整个生命周期的时间。</p><h3 id="开启-Profile"><a href="#开启-Profile" class="headerlink" title="开启 Profile"></a>开启 Profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开启：set profiling = on;</span><br><span class="line">查看：SHOW VARIABLES LIKE &#x27;profiling%&#x27;;</span><br></pre></td></tr></table></figure><p>开启后 MySQL 后台会保存最近 15 次的结果。</p><h3 id="查看-Profile"><a href="#查看-Profile" class="headerlink" title="查看 Profile"></a>查看 Profile</h3><p>使用 SHOW PROFILES 可以查看最近的 15 次结果。</p><h3 id="查看具体的-Profile"><a href="#查看具体的-Profile" class="headerlink" title="查看具体的 Profile"></a>查看具体的 Profile</h3><p>通过 Query_ID 可以得到具体 SQL 从连接 - 服务 - 引擎 - 存储四层结构完整生命周期的耗时。</p><p>使用命令：SHOW PROFILE CPU, BLOCK IO FOR Query_ID</p><p>可用参数type:</p><ul><li>ALL  　　#显示所有的开销信息</li><li>BLOCK IO　　#显示块IO相关开销</li><li>CONTEXT SWITCHES　　#上下文切换相关开销</li><li>CPU     #显示CPU相关开销信息</li><li>IPC     #显示发送和接收相关开销信息</li><li>MEMORY　#显示内存相关开销信息</li><li>PAGE FAULTS　　#显示页面错误相关开销信息</li><li>SOURCE　　#显示和Source_function，Source_file，Source_line相关的开销信息</li><li>SWAPS　　#显示交换次数相关开销的信息</li></ul><p>如果出现以下几个状态则 SQL 需要重点分析：</p><ul><li>converting HEAP to MyISAM  　　#查询结果太大，内存不够用了，在往磁盘上搬</li><li>Creating tmp table         　　#创建了临时表，回先把数据拷贝到临时表，用完后再删除临时表</li><li>Copying to tmp table on disk 　#把内存中临时表复制到磁盘，危险！！！</li><li>locked</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;慢查询日志分析&quot;&gt;&lt;a href=&quot;#慢查询日志分析&quot; class=&quot;headerlink&quot; title=&quot;慢查询日志分析&quot;&gt;&lt;/a&gt;慢查询日志分析&lt;/h2&gt;&lt;h3 id=&quot;设置慢查询&quot;&gt;&lt;a href=&quot;#设置慢查询&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://orechou.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】Explain</title>
    <link href="https://orechou.github.io/2021/08/06/mysql/MySQL_Explain/"/>
    <id>https://orechou.github.io/2021/08/06/mysql/MySQL_Explain/</id>
    <published>2021-08-06T09:00:00.000Z</published>
    <updated>2022-03-27T11:14:13.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-Explain"><a href="#MySQL-Explain" class="headerlink" title="MySQL Explain"></a>MySQL Explain</h1><p>Explain 是 MySQL 自带的查询优化器。</p><p>使用 Explain + SQL 可查询出执行的相关信息，主要包含以下 10 个属性：<br>id, select_type, table, type, possible_key, key, key_len, ref, row, filtered, Extra</p><p>数据库性能瓶颈，主要关注 CPU 和 IO。</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>反映的是表的读取顺序，或者查询中 SELECT 的执行顺序。</p><p>小表永远驱动大表，三种情况：<br>（1）id 相同，执行顺序是由上至下的<br>（2）id 不同，如果是子查询，id 序号会递增，id 值越大优先级越高，越先被执行<br>（3）id 存在相同的，也存在不同的，所有组中，id 越大越先执行，如果 id 相同的，从上往下顺序执行</p><h2 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h2><p>反映的是 MySQL 理解的查询类型，有几下几种：</p><ul><li>SIMPLE：简单的 SELECT 查询，查询中不包含子查询或 UNION</li><li>PRIMARY：查询中若包含任何复杂的字部分，最外层查询标记为 PRIMARY</li><li>SUBQUERY：SELECT 或 WHERE 列表中的子查询</li><li>DERIVED：在 FROM 列表中包含的子查询，MySQL 会递归执行这些子查询，把结果放在临时表里</li><li>UNION：若第二个 SELECT 出现在 UNION 后，则被标记为 UNION，若 UNION 包含在 FROM 字句的子查询中，外层 SELECT 将被标记为 DERIVED</li><li>UNION RESULT：UNION 后的结果集</li></ul><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>反映的是数据从哪张表中读取出来。</p><p>例如 <code>&lt;derived2&gt;</code> 表示从 id 为 2 的临时表读取。</p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>type 是访问类型排序，反映的是 SQL 的优化状态，有如下几种：</p><ul><li>system：从单表只查出一行记录（等于系统表），这是 const 类型的特例，一般不会出现</li><li>const：查询条件用到了常量，通过索引一次就找到，常在使用 primary key 或 unique 索引中出现</li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它可能会找到多个符合条件的行，与eq_ref的差别是eq_ref只匹配了一条记录</li><li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般是在where语句中出现了 between、&lt;、&gt;、in 等的查询</li><li>index：full Index scan，index 和 all 的区别为 index 类型只遍历索引树。这通常比 all 快，因为索引文件通常比数据文件小</li><li>all：全表扫描，如果查询数据量很大时，全表扫描效率是很低的</li></ul><p>在 SQL 优化中至少做到 range 级别，最好能达到 ref 级别</p><h2 id="possible-key-amp-key-amp-key-len"><a href="#possible-key-amp-key-amp-key-len" class="headerlink" title="possible_key &amp; key &amp; key_len"></a>possible_key &amp; key &amp; key_len</h2><p>possible_key 反映的是 MySQL 推测可能用到的索引，不一定被查询实际使用到。<br>key 反映的是实际使用到的索引，若为 null 则是因为没有建索引或者索引失效。<br>key_len 反映索引中使用的字节数，可计算计算查询中使用的索引的长度，越短越好。其显示的值为索引字段的最大可能长度，而非实际使用长度。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref 反映的是哪些列或者常量被用于查找索引列上的值。</p><h2 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h2><p>rows 反映的根据表的统计信息和索引选用的情况，大致估算出来到找到所有记录所需要读取的行数。</p><h2 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h2><p>使用 explain extended 时会出现这个列，5.7 之后的版本默认就有这个字段。这个字段表示存储引擎返回的数据在 server 层过滤后，剩下多少满足查询的记录数量的比例，不是具体记录数。</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>Extra 反映的不适合在其他列显示，但是也很重要的信息，主要有以下几种：</p><ul><li>Using filesort：MySQL 中无法利用索引完成的排序，这时会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。</li><li>Using temporary：使用了临时表保存中间结果，MySQL 在对查询结果排序时使用临时表。常见于排序 order by 和分组查询 group by。</li><li>Using index：MySQL 相应的 select 操作中使用了覆盖索引，避免了访问表的数据行，效率高。</li><li>Using where：MySQL 使用了 where 过滤。</li><li>Using join buffer：MySQL 使用了连接缓存。</li><li>Impossible where：where 子句的值为 false。</li><li>Distinct：优化 distinct 操作，在找到第一匹配的元组后即停止找同样值的动作。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL-Explain&quot;&gt;&lt;a href=&quot;#MySQL-Explain&quot; class=&quot;headerlink&quot; title=&quot;MySQL Explain&quot;&gt;&lt;/a&gt;MySQL Explain&lt;/h1&gt;&lt;p&gt;Explain 是 MySQL 自带的查询优化器。&lt;</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://orechou.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
